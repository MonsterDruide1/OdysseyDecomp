#pragma once

#include <math/seadQuat.h>

#include "Library/LiveActor/LiveActorGroup.h"
#include "Library/Scene/Scene.h"

namespace al {
class LayoutActor;
class SimpleLayoutAppearWaitEnd;
class ParabolicPath;
class WipeSimple;
class WipeHolder;
class WindowConfirm;
class SimpleAudioUser;
class DemoSyncedEventKeeper;
class LayoutTextureRenderer;
class ChromakeyDrawer;
class HtmlViewer;
}  // namespace al

class Shine;
class GameDataHolderAccessor;
class GameDataHolder;
class MapLayout;
class ProjectItemDirector;
class PlayerActorHakoniwa;
class ProjectDemoDirector;
class StageSceneLayout;
class TimeBalloonNpc;
class TimeBalloonDirector;
class TimeBalloonSequenceInfo;
class CollectBgmPlayer;
class CollectBgmRegister;
class BgmAnimeSyncDirector;
class NpcEventDirector;
class ScenarioStartCameraHolder;
class ControllerGuideSnapShotCtrl;
class InputSeparator;
class MiniGameMenu;
class Pyramid;
class SceneAudioSystemPauseController;
class DemoSoundSynchronizer;
class StageSceneStateWorldMap;
class StageSceneStateShop;
class StageSceneStateSnapShot;
class StageSceneStateGetShine;
class StageSceneStateGetShineMain;
class StageSceneStateGetShineGrand;
class StageSceneStateCollectBgm;
class StageSceneStateCollectionList;
class StageSceneStateMiniGameRanking;
class StageSceneStatePauseMenu;
class StageSceneStateCloset;
class StageSceneStateSkipDemo;
class StageSceneStateCheckpointWarp;
class StageSceneStateCarryMeat;
class StageSceneStateMiss;
class StageSceneStateYukimaruRace;
class StageSceneStateYukimaruRaceTutorial;
class StageSceneStateRaceManRace;
class StageSceneStateRadicon;
class StageSceneStateScenarioCamera;
class StageSceneStateRecoverLife;
class StageSceneStateGetShineMainSandWorld;
class StageSceneStateWarp;
class ProjectSeNamedList;
class ProjectNfpDirector;
class PlayGuideSkip;
class CinemaCaption;
class KoopaLv1;
class StageSceneStateWorldIntroCamera;
class StageSceneStateTimeBalloon;
class StageSceneStateTitleLogo ;
class StageSceneStateTalk;
class LocationNameCtrl;
class ShoppingWatcher;
class CollectionList;
class OpeningStageStartDemo;
class CameraTicket;
class HelpAmiiboDirector;

class StageScene : public al::Scene {
public:
    StageScene();
    ~StageScene() override;
    void init(const al::SceneInitInfo&) override;
    void appear() override;
    void kill() override;

    void control() override;
    void drawMain() const override;

    bool isEnableSave() const;

private:
    sead::FixedSafeString<64> mStageName;
    s32 _130;
    StageSceneStateWorldMap* mStateWorldMap;
    StageSceneStateShop* mStateShop;
    StageSceneStateSnapShot* mStateSnapShot;
    StageSceneStateGetShine* mStateGetShine;
    StageSceneStateGetShineMain* mStateGetShineMain;
    StageSceneStateGetShineGrand* mStateGetShineGrand;
    StageSceneStateCollectBgm* mStateCollectBgm;
    StageSceneStateCollectionList* mStateCollectionList;
    StageSceneStateMiniGameRanking* mStateMiniGameRanking;
    StageSceneStatePauseMenu* mStatePauseMenu;
    StageSceneStateCloset* mStateCloset;
    StageSceneStateSkipDemo* mStateSkipDemo;
    StageSceneStateCheckpointWarp* mStateCheckpointWarp;
    StageSceneStateCarryMeat* mStateCarryMeat;
    StageSceneStateTimeBalloon* mStateTimeBalloon;
    StageSceneStateTitleLogo * mStateTitleLogo;
    StageSceneStateMiss* mStateMiss;
    StageSceneStateYukimaruRace* mStateYukimaruRace;
    StageSceneStateYukimaruRaceTutorial* mStateYukimaruRaceTutorial;
    StageSceneStateRaceManRace* mStateRaceManRace;
    StageSceneStateRadicon* mStateRadicon;
    StageSceneStateScenarioCamera* mStateScenarioCamera;
    StageSceneStateRecoverLife* mStateRecoverLife;
    StageSceneStateGetShineMainSandWorld* mStateGetShineMainSandWorld;
    StageSceneStateTalk* mStateTalk;
    StageSceneStateWarp* mStateWarp;
    StageSceneStateWorldIntroCamera* mStateWorldIntroCamera;
    ScenarioStartCameraHolder* mStateCameraHolder;
    sead::FixedSafeString<64> _218;
    sead::FixedSafeString<64> _270;
    void* _2c8;
    GameDataHolder* mGameDataHolder;
    al::PlacementInfo* _2d8;
    al::LayoutTextureRenderer* _2e0;
    PlayGuideSkip* mPlayGuideSkip;
    CinemaCaption* mCinemaCaption;
    StageSceneLayout* mSceneLayout;
    char _300;
    char _301;
    al::SimpleLayoutAppearWaitEnd* _308;
    al::SimpleLayoutAppearWaitEnd* _310;
    al::SimpleLayoutAppearWaitEnd* _318;
    ControllerGuideSnapShotCtrl* _320;
    InputSeparator* _328;
    al::WipeSimple* _330;
    al::WipeHolder* mWipeHolder;
    LocationNameCtrl* mLocationNameCtrl;
    al::WindowConfirm* _348;
    MiniGameMenu* mMiniGameMenu;
    char _358;
    char _359[15];
    char _368;
    MapLayout* _370;
    al::SimpleLayoutAppearWaitEnd* _378;
    al::DeriveActorGroup<ShoppingWatcher>* _380;
    CollectionList* mCollectionList;
    KoopaLv1* mKoopaLv1;
    TimeBalloonNpc* mTimeBalloonNpc;
    ProjectItemDirector* mProjectItemDirector;
    Pyramid* mPyramid;
    OpeningStageStartDemo* mOpeningStageStartDemo;
    al::Nerve* _3b8;
    SceneAudioSystemPauseController* mAudioSystemPauseController;
    DemoSoundSynchronizer* mDemoSoundSynchronizer;
    al::SimpleAudioUser* mStageStartAtmosSe;
    al::SimpleAudioUser* mSePlayArea;
    al::SimpleAudioUser* mSnapShotCameraCtrlAudio;
    ProjectSeNamedList* mSeNamedList;
    void* _3f0;
    TimeBalloonDirector* mTimeBalloonDirector;
    TimeBalloonSequenceInfo* mTimeBalloonSequenceInfo;
    void* _408;
    CameraTicket* _410;
    sead::Vector3f _418;
    sead::Vector3f _424;
    sead::Vector3f _430;
    s32 _43c;
    const al::LiveActor* _440;
    al::ParabolicPath* _448;
    al::LiveActor* _450;
    al::LiveActor* _458;
    s32 _460;
    CollectBgmPlayer* mCollectBgmPlayer;
    CollectBgmRegister* mCollectBgmRegister;
    BgmAnimeSyncDirector* mBgmAnimeSyncDirector;
    al::DemoSyncedEventKeeper* mDemoSyncedEventKeeper;
    const char* _488;
    s32 _490;
    bool _494;
    bool _495;
    bool _496;
    u8 _497;
    NpcEventDirector* mNpcEventDirector;
    al::ChromakeyDrawer* mChromakeyDrawer;
    al::HtmlViewer* _4a8;
    ProjectNfpDirector* mProjectNfpDirector;
    HelpAmiiboDirector* mHelpAmiiboDirector;
};

static_assert(sizeof(StageScene) == 0x4C0);

namespace rs {
void tryStartRaceStage(al::Scene*, GameDataHolder*);
bool updateNormalState(al::Scene*);
void updateEffectSystemEnv(al::Scene*);
bool updateNormalStateExcludeGraphics(al::Scene*);
bool updateBirdCarryMeat(al::Scene*);
void updateKitListExcludePlayer(al::Scene*);
void updateKitListExcludeCamera(al::Scene*);
void updateKitListExcludeCameraDemoChangeWorld(al::Scene*);
void updateKitListPlayerGroupNormal(al::Scene*);
void updateKitListDemoPlayerNoPauseEffect(al::Scene*);
void updateKitListDemoPlayerWithPauseEffect(al::Scene*);
void updateKitListDemoPlayerWithPauseEffectAndCalcAtEndClip(al::Scene*);
void updateKitListDemoNormalNoPauseEffect(al::Scene*);
void updateKitListDemoNormalWithPauseEffect(al::Scene*);
void updateKitListDemoCapWorldOpeninglWithPauseEffect(al::Scene*);
void updateKitListLayout(al::Scene*);
void updateKitListPostNoViewRenderer(al::Scene*);
void updateKitListLayoutIgnorePause(al::Scene*);
void updateKitListLayoutOnlyLayoutScene(al::Scene*);
void updateKitListPostWithPauseNormalEffectAndPlayerEffect(al::Scene*);
void updateKitListPostSnapShot(al::Scene*);
void setScenarioName(al::LayoutActor*, const al::Scene*);
void startTalkMsgTimeBalloonLayout(const al::Scene*);
void endPlayTalkMsgTimeBalloonLayout(const al::Scene*);
void endForceTalkMsgTimeBalloonLayout(const al::Scene*);
void changeDemoCommonProc(al::Scene*, ProjectItemDirector*);
void endDemoCommonProc(al::Scene*, ProjectItemDirector*);
void endDemoNormalShineGet(al::Scene*, ProjectItemDirector*);
bool tryOpenMap(al::IUseNerve*, const al::Scene*, const MapLayout*, const al::Nerve*);
bool tryChangeNextStage(GameDataHolder*, al::Scene*);
al::LiveActor* getPlayerActor(const al::Scene*);
void registerGraphicsPreset(const al::Scene*, const char*, const char*, const char*, bool);
void requestGraphicsPreset(const al::Scene*, const char*, const sead::Vector3f&);
void requestGraphicsCubeMap(const al::Scene*, const char*, const char*);
void requestGraphicsPresetAndCubeMap(const al::Scene*, const char*, const char*, const char*);
void requestGraphicsPresetAndCubeMap(const al::Scene*, const char*, const char*, const char*,
                                     const sead::Vector3f&);
void requestGraphicsPresetAndCubeMapFixedAngle(const al::Scene*, const char*, const char*,
                                               const char*);
void registerGraphicsPresetWorldMap(const al::Scene*);
void registerGraphicsPresetShop(const al::Scene*);
void registerGraphicsPresetMoonGet(const al::Scene*);
void registerGraphicsPresetCloset(const al::Scene*);
void registerGraphicsPresetPause(const al::Scene*);
void requestGraphicsPresetAndCubeMapWorldMap(const al::Scene*);
void requestGraphicsPresetAndCubeMapShop(const al::Scene*);
void requestGraphicsPresetAndCubeMapShopNoFixedAngle(const al::Scene*);
void requestGraphicsPresetAndCubeMapMoonGet(const al::Scene*);
void requestGraphicsPresetAndCubeMapMoonGetNoFixedAngle(const al::Scene*);
void requestGraphicsPresetAndCubeMapCloset(const al::Scene*);
void requestGraphicsPresetAndCubeMapClosetNoFixedAngle(const al::Scene*);
void requestGraphicsPresetAndCubeMapPause(const al::Scene*);
void requestGraphicsPresetAndCubeMapPauseNoFixedAngle(const al::Scene*);
void calcQuatPoseCheckpointWarpCap(sead::Quatf*, const sead::Vector3f&, const al::IUseCamera*);
ProjectDemoDirector* getDemoDirector(const al::Scene*);
Shine* getDemoShineActor(const al::Scene*);
bool isExistDemoShine(const al::Scene*);
}  // namespace rs
